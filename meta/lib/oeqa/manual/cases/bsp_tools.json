[
    {
        "test": {
            "@alias": "bsps-tools.bsps-tools.qemu_can_be_started_with_KVM_enabled",
            "author": [
                {
                    "email": "alexandru.c.georgescu@intel.com",
                    "name": "alexandru.c.georgescu@intel.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Build a kernel with KVM enabled  In Local.conf add  QEMU_USE_KVM = \"${@ 'intel-corei7-64 intel-core2-32 qemux86\nqemux86-64' if os.access('/dev/kvm', os.R_OK|os.W_OK) else '' }\"  ",
                    "expected_results": ""
                },
                "2": {
                    "action": "Start qemu with option \"kvm\" with runqemu  a. If you start qemu with kvm failed, maybe it is because host not install kvm and vhost_net module. Follow below link to install them.  b. vhost_test refer: https://wiki.yoctoproject.org/wiki/Running_an_x86_Yocto_Linux_image_under_QEMU_KVM  c. kvm refer: https://wiki.yoctoproject.org/wiki/How_to_enable_KVM_for_Poky_qemu \n",
                    "expected_results": ""
                },
                "3": {
                    "action": "Check if qemu starts up and if kvm_intel module is used \n",
                    "expected_results": ""
                },
                "4": {
                    "action": "If kvm_intel module is not used when starting qemu, it will show 0 in \"Used by\" column when you run \"lsmod | grep kvm_intel\" ",
                    "expected_results": ""
                }
            },
            "summary": "qemu_can_be_started_with_KVM_enabled"
        }
    },
    {
        "test": {
            "@alias": "bsps-tools.bsps-tools.Post-installation_logging",
            "author": [
                {
                    "email": "yi.zhao@windriver.com",
                    "name": "yi.zhao@windriver.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Download the poky source and set environment",
                    "expected_results": "The /var/log/postinstall.log should exist in the first boot. The content of this log is like below: Running postinst /etc/rpm-postinsts/man...List directory to check the output logbinbootdevetchomeliblost+foundmediamntprocrunsbinsystmpusrvarList nonexist directory to check the stderr redirection logls: /nonexist: No such file or directory"
                },
                "2": {
                    "action": "Add the following lines to a .bb file. For expample, meta/recipes-connectivity/openssh/openssh_6.2p2.bb:pkg_postinst_${PN} () {   #!/bin/sh -e   if [ x\"$D\" = \"x\" ]; then   echo \"List directory to check the output log\"   ls /   echo \"List nonexist directory to check the stderr redirection log\"   ls /nonexist   else   exit 1   fi}Make sure the feature \"debug-tweaks\" is added in conf/local.conf",
                    "expected_results": ""
                },
                "3": {
                    "action": "Add ssh-server-openssh to EXTRA_IMAGE_FEATURES in local.conf",
                    "expected_results": ""
                },
                "4": {
                    "action": "Build core-image-minimal",
                    "expected_results": ""
                },
                "5": {
                    "action": "Boot up the image and check the /var/log/postinstall.log",
                    "expected_results": ""
                }
            },
            "summary": "Post-installation_logging"
        }
    },
    {
        "test": {
            "@alias": "bsps-tools.bsps-tools.Add_user_with_cleartext_type_password_during_filesystem_construction",
            "author": [
                {
                    "email": "ke.zou@windriver.com",
                    "name": "ke.zou@windriver.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Download the poky source and set the environment ",
                    "expected_results": "No error during image building procedure."
                },
                "2": {
                    "action": "Add the following lines in conf/local.conf INHERIT += \"extrausers\" EXTRA_USERS_PARAMS = \"\\useradd -s /bin/sh -P 'tester3' tester3;\\\" The above settings do the following things:a. Add a user tester3 with cleartext password 'tester3' Build the image",
                    "expected_results": "Image can boot up"
                }
            },
            "summary": "Add_user_with_cleartext_type_password_during_filesystem_construction"
        }
    }
]