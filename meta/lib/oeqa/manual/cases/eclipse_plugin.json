[
    {
        "test": {
            "@alias": "eclipse-plugin.eclipse-plugin.support_SSH_connection_to_Target",
            "author": [
                {
                    "email": "alexandru.c.georgescu@intel.com",
                    "name": "alexandru.c.georgescu@intel.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "In Eclipse, swich to Remote System Explorer to create a connention baseed on SSH, input the remote target IP address as the Host name, make sure disable the proxy in Window->Preferences->General->Network Connection, set Direct as Active Provider field. ",
                    "expected_results": "the connection based on SSH could be set up."
                },
                "2": {
                    "action": "Configure connection from Eclipse: Run->Run Configurations->C/C++ Remote Application\\->New Connection->General->SSH Only ",
                    "expected_results": ""
                },
                "3": {
                    "action": "Then right click to connect, input the user ID and password. ",
                    "expected_results": ""
                },
                "4": {
                    "action": "expand the connection, it will show the Sftp Files etc.  NOTE. Might need to change dropbear to openssh and add the packagegroup-core-eclipse-debug recipe",
                    "expected_results": ""
                }
            },
            "summary": "support_SSH_connection_to_Target"
        }
    },
    {
        "test": {
            "@alias": "eclipse-plugin.eclipse-plugin.Relocatable_SDK_-_C_-_Build_Hello_World_ANSI_C_Autotools_Project",
            "author": [
                {
                    "email": "alexandru.c.georgescu@intel.com",
                    "name": "alexandru.c.georgescu@intel.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Launch a QEMU of target enviroment.(Reference to case \"ADT - Launch qemu by eclipse\") ",
                    "expected_results": ""
                },
                "2": {
                    "action": "Select File -> New -> Project. ",
                    "expected_results": ""
                },
                "3": {
                    "action": "Double click C/C++. ",
                    "expected_results": " 1"
                },
                "4": {
                    "action": "Click C or C++ Project to create the project. ",
                    "expected_results": "Under the Project files, a new folder appears called Binaries. This indicates that the compilation have been successful and the project binary have been created.  1"
                },
                "5": {
                    "action": "Expand Yocto ADT Project. ",
                    "expected_results": ""
                },
                "6": {
                    "action": "Select Hello World ANSI C Autotools Project. ",
                    "expected_results": ""
                },
                "7": {
                    "action": "Put a name in the Project name. Do not use hyphens as part of the name. ",
                    "expected_results": ""
                },
                "8": {
                    "action": "Click Next. ",
                    "expected_results": ""
                },
                "9": {
                    "action": "Add information in the Author and Copyright notice fields. 1",
                    "expected_results": ""
                },
                "10": {
                    "action": "Click Finish. 1",
                    "expected_results": ""
                },
                "11": {
                    "action": "If the \"open perspective\" prompt appears, click \"Yes\" so that you open the C/C++ perspective. 1",
                    "expected_results": ""
                },
                "12": {
                    "action": "In the Project Explorer window, right click the project -> Reconfigure project. 1",
                    "expected_results": ""
                },
                "13": {
                    "action": "In the Project Explorer window, right click the project -> Build project. 14.\t\t\tRight click it again and Run as -> Run Configurations. \t\t\tUnder Run Configurations expand \"C/C++ Remote Application\". A configuration for the current project should appear. Clicking it will display the configuration settings. \t\t\tin \"C/C++ Application\" field input Remote Absolute File path for C/C++ Application. e.g.: /home/root/myapplication \t\t\tIn \"Connection\" drop-down list make sure a TCF connection is set up for your target. If not, create a new one by clicking the New button. 1",
                    "expected_results": ""
                },
                "14": {
                    "action": "After all settings are done, select the Run button on the bottom right corner  1",
                    "expected_results": ""
                },
                "15": {
                    "action": "Repeat the steps 14-15, but instead of using Run Configurations use Debug Configurations: Right click it again and Debug as -> Debug Configurations Under Debug Configurations expand \"C/C++ Remote Application\". A configuration for the current project should appear. Clicking it will display the configuration settings. in \"C/C++ Application\" field input Remote Absolute File path for C/C++ Application. e.g.: /home/root/myapplication In \"Connection\" drop-down list make sure a TCF connection is set up for your target. If not, create a new one by clicking the New button 1",
                    "expected_results": ""
                },
                "16": {
                    "action": "After all settings are done, select the Debug button on the bottom right corner",
                    "expected_results": ""
                }
            },
            "summary": "Relocatable_SDK_-_C_-_Build_Hello_World_ANSI_C_Autotools_Project"
        }
    },
    {
        "test": {
            "@alias": "eclipse-plugin.eclipse-plugin.Relocatable_SDK_-_C++_-_Build_Hello_World_C++_Autotools_project",
            "author": [
                {
                    "email": "alexandru.c.georgescu@intel.com",
                    "name": "alexandru.c.georgescu@intel.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Launch a QEMU of target enviroment.(Reference to case \"ADT - Launch qemu by eclipse\") ",
                    "expected_results": ""
                },
                "2": {
                    "action": "Select File -> New -> Project. ",
                    "expected_results": ""
                },
                "3": {
                    "action": "Double click C/C++. ",
                    "expected_results": " 1"
                },
                "4": {
                    "action": "Click C or C++ Project to create the project. ",
                    "expected_results": "Under the Project files, a new folder appears called Binaries. This indicates that the compilation have been successful and the project binary have been created.  1"
                },
                "5": {
                    "action": "Expand Yocto ADT Project. ",
                    "expected_results": ""
                },
                "6": {
                    "action": "Select Hello World ANSI C++ Autotools Project. ",
                    "expected_results": ""
                },
                "7": {
                    "action": "Put a name in the Project name. Do not use hyphens as part of the name. ",
                    "expected_results": ""
                },
                "8": {
                    "action": "Click Next. ",
                    "expected_results": ""
                },
                "9": {
                    "action": "Add information in the Author and Copyright notice fields. 1",
                    "expected_results": ""
                },
                "10": {
                    "action": "Click Finish. 1",
                    "expected_results": ""
                },
                "11": {
                    "action": "If the \"open perspective\" prompt appears, click \"Yes\" so that you open the C/C++ perspective. 1",
                    "expected_results": ""
                },
                "12": {
                    "action": "In the Project Explorer window, right click the project -> Reconfigure project. 1",
                    "expected_results": ""
                },
                "13": {
                    "action": "In the Project Explorer window, right click the project -> Build project.  1",
                    "expected_results": ""
                },
                "14": {
                    "action": "Right click it again and Run as -> Run Configurations. \t\t\tUnder Run Configurations expand \"C/C++ Remote Application\". A configuration for the current project should appear. Clicking it will display the configuration settings. \t\t\tin \"C/C++ Application\" field input Remote Absolute File path for C/C++ Application. e.g.: /home/root/myapplication \t\t\tIn \"Connection\" drop-down list make sure a TCF connection is set up for your target. If not, create a new one by clicking the New button. 1",
                    "expected_results": ""
                },
                "15": {
                    "action": "After all settings are done, select the Run button on the bottom right corner  1",
                    "expected_results": ""
                },
                "16": {
                    "action": "Repeat the steps 14-15, but instead of using Run Configurations use Debug Configurations: \t\tRight click it again and Debug as -> Debug Configurations \t\tUnder Debug Configurations expand \"C/C++ Remote Application\". A configuration for the current project should appear. Clicking it will display the configuration settings. \t\tin \"C/C++ Application\" field input Remote Absolute File path for C/C++ Application.\t\te.g.: /home/root/myapplication \t\tIn \"Connection\" drop-down list make sure a TCF connection is set up for your target. If not, create a new one by clicking the New button 1",
                    "expected_results": ""
                },
                "17": {
                    "action": "After all settings are done, select the Debug button on the bottom right corner",
                    "expected_results": ""
                }
            },
            "summary": "Relocatable_SDK_-_C++_-_Build_Hello_World_C++_Autotools_project"
        }
    },
    {
        "test": {
            "@alias": "eclipse-plugin.eclipse-plugin.Build_Eclipse_Plugin_from_source",
            "author": [
                {
                    "email": "laurentiu.serban@intel.com",
                    "name": "laurentiu.serban@intel.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Clone eclipse-poky source.    - git clone git://git.yoctoproject.org/eclipse-poky ",
                    "expected_results": ""
                },
                "2": {
                    "action": "Checkout correct tag.   - git checkout /  ",
                    "expected_results": ""
                },
                "3": {
                    "action": "Move to scripts/ folder. ",
                    "expected_results": ""
                },
                "4": {
                    "action": "Run ./setup.sh ",
                    "expected_results": ""
                },
                "5": {
                    "action": "When the script finishes, it prompts a command to issue to build the plugin. It should look similar to the following:  $ ECLIPSE_HOME=/eclipse-poky/scripts/eclipse ./build.sh / 2>&1 | tee -a build.log  Here, the three arguments to the build script are tag name, branch for documentation and release name. ",
                    "expected_results": ""
                },
                "6": {
                    "action": "On an eclipse without the Yocto Plugin, select \"Install New Software\" from Help pull-down menu ",
                    "expected_results": ""
                },
                "7": {
                    "action": "Select Add and from the dialog choose Archive... Look for the *archive.zip file that was built previously with the build.sh script. Click OK. ",
                    "expected_results": ""
                },
                "8": {
                    "action": "Select all components and proceed with Installation of plugin. Restarting eclipse might be required.  \n",
                    "expected_results": "Eclipse plugin is successfully installed  Documentation is there. For example if you have release yocto-2.0.1 you will found onhttp://autobuilder.yoctoproject.org/pub/releases/yocto-2.0.1/eclipse-plugin/mars/ archive with documentation likeorg.yocto.doc-development-$date.zip "
                }
            },
            "summary": "Build_Eclipse_Plugin_from_source"
        }
    },
    {
        "test": {
            "@alias": "eclipse-plugin.eclipse-plugin.Launch_QEMU_from_Eclipse_using_eSDK",
            "author": [
                {
                    "email": "alexandru.c.georgescu@intel.com",
                    "name": "alexandru.c.georgescu@intel.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Set the Yocto ADT's toolchain root location, sysroot location and kernel, in the menu Window -> Preferences -> Yocto SDK. (a)Point to the Toolchain:If you are using a stand-alone pre-built toolchain, you should be pointing to the /opt/poky/{test-version} directory as Toolchain Root Location. The eSDK should be used instead of regular SDK.If you are using a system-derived toolchain, the path you provide for the Toolchain Root Location field is the Yocto Project's build directory.     E.g:/home/user/yocto/poky/build(b)Specify the Sysroot Location:Sysroot Location is the location where the root filesystem for the target hardware is created on the development system. The sysroot should be extracted with runqem-extract-sdk from an eSDK toolchain. Need to use core-image-sato-sdk-qemu.tar.bz2 (c)Select the Target Architecture:The target architecture is the type of hardware you are going to use or emulate. Use the pull-down Target Architecture menu to make your selection. (d) QEMU:Select this option if you will be using the QEMU emulator. Specify the Kernel matchingg the QEMU architecture you are using.   e.g: /home/$USER/yocto/adt-installer/download_image/bzImage-qemux86.bin  (e) select OK to save the settings.",
                    "expected_results": ""
                },
                "2": {
                    "action": "Create a New Project with New> Project > C/C ++ C Project > Yocto Project Autotools > Select Autotools Project > Finish",
                    "expected_results": ""
                },
                "3": {
                    "action": "In the Eclipse toolbar, expose the Run -> External Tools menu. Your image should appear as a selectable menu item. ",
                    "expected_results": ""
                },
                "4": {
                    "action": "Select your image in the navigation pane to launch the emulator in a new window. ",
                    "expected_results": ""
                },
                "5": {
                    "action": "If needed, enter your host root password in the shell window at the prompt. This sets up a Tap 0 connection needed for running in user-space NFS mode. ",
                    "expected_results": " Qemu can be lauched normally."
                }
            },
            "summary": "Launch_QEMU_from_Eclipse_using_eSDK"
        }
    },
    {
        "test": {
            "@alias": "eclipse-plugin.eclipse-plugin.Eclipse_Poky_installation_and_setup",
            "author": [
                {
                    "email": "ee.peng.yeoh@intel.com",
                    "name": "ee.peng.yeoh@intel.com"
                }
            ],
            "execution": {
                "1": {
                    "action": "Install SDK\ta)Download https://autobuilder.yocto.io/pub/releases//toolchain/x86_64/poky-glibc-x86_64-core-\timage-sato-i586-toolchain-.sh \tb)Run the SDK installer and accept the default installation directory ",
                    "expected_results": ""
                },
                "2": {
                    "action": "Install \"Eclipse IDE for C/C++ Developers\" Oxygen release (4.7.0) \ta) Go to https://www.eclipse.org/downloads/packages/all, click \"Oxygen R\" \tb) Click to download the build for your OS \tc) Click \"Download\" button to download from a mirror \td) Run \"tar xf\" to extract the downloaded archive \te) Run \"eclipse/eclipse\" to start Eclipse \tf) Optional step for host machine within Intel network: In Eclipse workbench window, go to \"Window\" menu -> \"Preferences...\". \tg) In \"Preferences\" dialog, go to \"General\" -> \"Network Connections\", set \"Active Provider\" to \"Manual\". In \"Proxy \tentries\" table, select HTTP and click \"Edit\" and enter host \"proxy-chain.intel.com\" port 911, click OK. Repeat for \tHTTPS with port 91",
                    "expected_results": ""
                },
                "3": {
                    "action": "Click OK to close \"Preferences\" dialog. \th) Go to \"File\" menu -> \"Restart\" to restart Eclipse for proxy settings to take effect. ",
                    "expected_results": ""
                },
                "4": {
                    "action": "Install Eclipse Poky plugins \ta) Download https://autobuilder.yocto.io/pub/releases//eclipse-plugin/\tversion>/org.yocto.sdk-development--archive.zip \tb) In Eclipse workbench window, go to \"Help\" menu -> \"Install New Software...\" \tc) In \"Install\" dialog, click \"Add...\" button \td) In \"Add Repository\" dialog, enter \"Eclipse Poky\" for (repository) Name, click \"Archive...\" \te) In \"Repository archive\" browse dialog, select the downloaded Eclipse Poky repository archive \tf) Back in \"Add Repository\" dialog, click \"OK\" \tg) Back in \"Install\" dialog, make sure \"Work with:\" is set to \"Eclipse Poky\" repository, tick \"Yocto Project \tDocumentation Plug-in\" and \"Yocto Project SDK Plug-in\", click \"Next >\" and verify plugins/features name/version, \tclick \"Next >\" and accept license agreement, click \"Finish\" \th) If \"Security Warning\" dialog appears, click \"OK\" to install unsigned content. \ti) In \"Software Updates\" dialog, click \"Yes\" to restart Eclipse to complete Eclipse Poky plugins installation. ",
                    "expected_results": ""
                },
                "5": {
                    "action": "Setup Eclipse Poky to use SDK \ta) In Eclipse workbench window, go to \"Window\" menu -> \"Preferences\". \tb) In \"Preferences\" window, go to \"Yocto Project SDK\", in \"Cross Compiler Options\" frame, select \"Standalone pre-\tbuilt toolchain\". ",
                    "expected_results": "Eclipse Poky plugins installed and running successfully, e.g. observe that \"Yocto Project Tools\" menu is available on Eclipse workbench window."
                }
            },
            "summary": "Eclipse_Poky_installation_and_setup"
        }
    }
]